// @swim/royal-caribbean-demo v0.1.0 (c) 2015-2022 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@swim/domain"), require("@swim/util"), require("@swim/model"), require("@swim/client"), require("@swim/graphics"), require("@swim/controller"), require("@swim/panel"), require("@swim/uri"), require("@swim/widget"), require("@swim/view"), require("@swim/table"), require("@swim/math"), require("@swim/theme"), require("@swim/component"), require("@swim/structure")) : typeof define === "function" && define.amd ? define([ "exports", "@swim/domain", "@swim/util", "@swim/model", "@swim/client", "@swim/graphics", "@swim/controller", "@swim/panel", "@swim/uri", "@swim/widget", "@swim/view", "@swim/table", "@swim/math", "@swim/theme", "@swim/component", "@swim/structure" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim.royalcaribbeandemo = global.swim.royalcaribbeandemo || {}), global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, domain, util, model, client, graphics, controller, panel, uri, widget, view, table, math, theme, component, structure) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let RoomBoardController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class RoomBoardController extends panel.BoardController {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.initBoard();
      }
      initBoard() {
        const boardView = this.sheet.attachView();
        boardView.appendChild(panel.PanelView).style.set({
          margin: 6
        });
      }
    }, (() => {
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        }
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        }
      }, _entity_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let RoomAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class RoomAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(RoomAspectTrait.icon);
      }
      createTabController() {
        return new RoomBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let RoomEntityTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    return _a = class RoomEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.icon.setIntrinsic(RoomEntityTrait.icon);
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M20,2L4,2C3,2,2,2.9,2,4L2,7C2,7.7,2.4,8.3,3,8.7L3,20C3,21.1,4.1,22,5,22L19,22C19.9,22,21,21.1,21,20L21,8.7C21.6,8.3,22,7.7,22,7L22,4C22,2.9,21,2,20,2ZM15,14L9,14L9,12L15,12L15,14ZM20,7L4,7L4,4L20,4L20,7Z");
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: RoomAspectTrait,
        traitKey: "aspect"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let RoomsRelationTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _rooms_decorators;
    let _rooms_initializers = [];
    return _a = class RoomsRelationTrait extends domain.RelationTrait {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.rooms = __runInitializers(this, _rooms_initializers, void 0);
        this.title.setIntrinsic("Rooms");
        this.id.setIntrinsic("room");
      }
    }, (() => {
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: RoomEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(roomTrait) {
          const roomId = roomTrait.id.value;
          roomTrait.title.setIntrinsic(roomId);
          roomTrait.nodeUri.setIntrinsic("/room/" + roomId);
          roomTrait.portal.insertModel();
        },
        compareTraits(a, b) {
          return util.Strings.compare(a.title.value, b.title.value);
        }
      }) ];
      _rooms_decorators = [ client.MapDownlink({
        laneUri: "rooms",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let roomTrait = this.owner.entities.get(nodeUri.pathName);
          if (roomTrait === null) {
            roomTrait = this.owner.entities.createTrait(nodeUri.pathName);
            roomTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(roomTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        }
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _rooms_decorators, {
        kind: "field",
        name: "rooms",
        static: false,
        private: false,
        access: {
          has: obj => "rooms" in obj,
          get: obj => obj.rooms,
          set: (obj, value) => {
            obj.rooms = value;
          }
        }
      }, _rooms_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  var OrderType;
  (function(OrderType) {
    OrderType["OrderA"] = "A";
    OrderType["OrderB"] = "B";
    OrderType["OrderC"] = "C";
    OrderType["Unknown"] = "Unknown";
  })(OrderType || (OrderType = {}));
  var RoomStatus;
  (function(RoomStatus) {
    RoomStatus["recentlyOccupied"] = "recentlyOccupied";
    RoomStatus["ecoMode"] = "ecoMode";
    RoomStatus["readyForPickup"] = "readyForPickup";
    RoomStatus["pickupCompleted"] = "pickupCompleted";
  })(RoomStatus || (RoomStatus = {}));
  let RoomController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _leaf_decorators;
    let _leaf_initializers = [];
    let _deckCell_decorators;
    let _deckCell_initializers = [];
    let _roomCell_decorators;
    let _roomCell_initializers = [];
    let _hvacTempCell_decorators;
    let _hvacTempCell_initializers = [];
    let _timeSinceOccupiedCell_decorators;
    let _timeSinceOccupiedCell_initializers = [];
    let _stats_decorators;
    let _stats_initializers = [];
    return _a = class RoomController extends widget.TimeSeriesController {
      constructor(nodeUri, ecoMode) {
        var _a;
        super();
        this.deckNumber = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.ecoMode = true;
        this.leaf = __runInitializers(this, _leaf_initializers, void 0);
        this.deckCell = __runInitializers(this, _deckCell_initializers, void 0);
        this.roomCell = __runInitializers(this, _roomCell_initializers, void 0);
        this.hvacTempCell = __runInitializers(this, _hvacTempCell_initializers, void 0);
        this.timeSinceOccupiedCell = __runInitializers(this, _timeSinceOccupiedCell_initializers, void 0);
        this.stats = __runInitializers(this, _stats_initializers, void 0);
        this.setKey(nodeUri);
        const regexResult = (_a = /\/ship\/\w+\/deck\/(\d+)\/room\/(\d+)/.exec(nodeUri)) !== null && _a !== void 0 ? _a : [ null, "", "" ];
        this.deckNumber = regexResult[1];
        this.roomNumber = regexResult[2];
        this.ecoMode = ecoMode;
      }
    }, (() => {
      _leaf_decorators = [ view.ViewRef({
        viewType: table.LeafView,
        extends: true
      }) ];
      _deckCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "deck",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _roomCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "room",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _hvacTempCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "hvacTemp",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _timeSinceOccupiedCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "timeSinceOccupied",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _stats_decorators = [ component.Property({
        valueType: structure.Value,
        value: structure.Value.absent(),
        didSetValue(value) {
          let moodStatus = RoomController.RoomStatusMood.get(this.owner.ecoMode ? RoomStatus.ecoMode : RoomStatus.recentlyOccupied);
          const deckCellView = this.owner.deckCell.view;
          if (deckCellView !== null) {
            deckCellView.set({
              content: this.owner.deckNumber,
              classList: [ "deck-cell-view" ]
            });
            deckCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
          const roomCellView = this.owner.roomCell.view;
          if (roomCellView !== null) {
            roomCellView.set({
              content: this.owner.roomNumber,
              classList: [ "room-cell-view" ]
            });
            roomCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
          const hvacTempCellView = this.owner.hvacTempCell.view;
          if (hvacTempCellView !== null) {
            const hvacTempValue = value.get("hvacTemperature").numberValue(0);
            console.log("hvacTempValue: ", hvacTempValue);
            hvacTempCellView.set({
              content: hvacTempValue.toString(),
              classList: [ "hvac-temp-cell-view" ]
            });
            hvacTempCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
          const timeSinceOccupiedCellView = this.owner.timeSinceOccupiedCell.view;
          if (timeSinceOccupiedCellView !== null) {
            const msSinceOccupied = Date.now() - value.get("occupancyDetected").numberValue(0);
            const hoursSinceOccupied = Math.floor(msSinceOccupied / 1e3 / 60 / 60);
            const minutesSinceOccupied = Math.floor(msSinceOccupied / 1e3 / 60 % 60);
            const secondsSinceOccupied = Math.floor(msSinceOccupied / 1e3 % 60);
            let content;
            if (hoursSinceOccupied) {
              content = `${hoursSinceOccupied}h ${minutesSinceOccupied}m ${secondsSinceOccupied}s`;
            } else if (minutesSinceOccupied) {
              content = `${minutesSinceOccupied}m ${secondsSinceOccupied}s`;
            } else {
              content = `${secondsSinceOccupied}s`;
            }
            timeSinceOccupiedCellView.set({
              content: content,
              classList: [ "time-in-processing-cell-view" ]
            });
            timeSinceOccupiedCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
        }
      }) ];
      __esDecorate(null, null, _leaf_decorators, {
        kind: "field",
        name: "leaf",
        static: false,
        private: false,
        access: {
          has: obj => "leaf" in obj,
          get: obj => obj.leaf,
          set: (obj, value) => {
            obj.leaf = value;
          }
        }
      }, _leaf_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _deckCell_decorators, {
        kind: "field",
        name: "deckCell",
        static: false,
        private: false,
        access: {
          has: obj => "deckCell" in obj,
          get: obj => obj.deckCell,
          set: (obj, value) => {
            obj.deckCell = value;
          }
        }
      }, _deckCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomCell_decorators, {
        kind: "field",
        name: "roomCell",
        static: false,
        private: false,
        access: {
          has: obj => "roomCell" in obj,
          get: obj => obj.roomCell,
          set: (obj, value) => {
            obj.roomCell = value;
          }
        }
      }, _roomCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacTempCell_decorators, {
        kind: "field",
        name: "hvacTempCell",
        static: false,
        private: false,
        access: {
          has: obj => "hvacTempCell" in obj,
          get: obj => obj.hvacTempCell,
          set: (obj, value) => {
            obj.hvacTempCell = value;
          }
        }
      }, _hvacTempCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeSinceOccupiedCell_decorators, {
        kind: "field",
        name: "timeSinceOccupiedCell",
        static: false,
        private: false,
        access: {
          has: obj => "timeSinceOccupiedCell" in obj,
          get: obj => obj.timeSinceOccupiedCell,
          set: (obj, value) => {
            obj.timeSinceOccupiedCell = value;
          }
        }
      }, _timeSinceOccupiedCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _stats_decorators, {
        kind: "field",
        name: "stats",
        static: false,
        private: false,
        access: {
          has: obj => "stats" in obj,
          get: obj => obj.stats,
          set: (obj, value) => {
            obj.stats = value;
          }
        }
      }, _stats_initializers, _instanceExtraInitializers);
    })(), _a.RoomStatusMood = new Map([ [ RoomStatus.recentlyOccupied, domain.Status.improving(0, 1, 2, 3, 4)(1.4) ], [ RoomStatus.ecoMode, domain.Status.improving(0, 1, 2, 3, 4)(3) ] ]), 
    _a;
  })();
  let RoomListController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _tablePanel_decorators;
    let _tablePanel_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _deckCol_decorators;
    let _deckCol_initializers = [];
    let _roomCol_decorators;
    let _roomCol_initializers = [];
    let _hvacTempCol_decorators;
    let _hvacTempCol_initializers = [];
    let _timeInProcessingCol_decorators;
    let _timeInProcessingCol_initializers = [];
    let _roomDownlink_decorators;
    let _roomDownlink_initializers = [];
    return _a = class RoomListController extends widget.TimeTableController {
      constructor(listEcoMode) {
        super();
        this.listEcoMode = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.tablePanel = __runInitializers(this, _tablePanel_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.deckCol = __runInitializers(this, _deckCol_initializers, void 0);
        this.roomCol = __runInitializers(this, _roomCol_initializers, void 0);
        this.hvacTempCol = __runInitializers(this, _hvacTempCol_initializers, void 0);
        this.timeInProcessingCol = __runInitializers(this, _timeInProcessingCol_initializers, void 0);
        this.roomDownlink = __runInitializers(this, _roomDownlink_initializers, void 0);
        this.setKey(`RoomListController-${listEcoMode ? "ecoMode" : "recentlyOccupied"}`);
        this.listEcoMode = listEcoMode;
        console.log("RLC constructor with this.listEcoMode value of : ", listEcoMode);
      }
    }, (() => {
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(panelView) {
          super.initView(panelView);
          this.owner.tablePanel.insertView().set({
            unitWidth: 1,
            unitHeight: 1,
            minFrameHeight: 0,
            minFrameWidth: 0,
            style: {
              marginTop: 48,
              marginBottom: 24
            },
            classList: [ "rlc-table-panel" ]
          });
          this.owner.table.insertView();
          this.owner.header.insertView();
        }
      }) ];
      _header_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          const headerView = super.createView();
          this.owner.deckCol.insertView(headerView);
          this.owner.roomCol.insertView(headerView);
          this.owner.hvacTempCol.insertView(headerView);
          this.owner.timeInProcessingCol.insertView(headerView);
          return headerView;
        }
      }) ];
      _tablePanel_decorators = [ view.ViewRef({
        extends: true,
        initView(tablePanelView) {
          super.initView(tablePanelView);
          tablePanelView.set({
            style: {
              margin: 0,
              marginTop: 36
            }
          });
        }
      }) ];
      _table_decorators = [ view.ViewRef({
        extends: true,
        createLayout() {
          const cols = new Array;
          cols.push(table.ColLayout.create("deck", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("room", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("hvacTemp", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("timeSinceOccupied", 2, 2, "144px", false, false, theme.Look.accentColor));
          return new table.TableLayout(null, null, null, math.Length.px(12), cols);
        }
      }) ];
      _deckCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "deck",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Deck"
          });
        }
      }) ];
      _roomCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "room",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Stateroom"
          });
        }
      }) ];
      _hvacTempCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "hvacTemp",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "HVAC Temp"
          });
        }
      }) ];
      _timeInProcessingCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "timeSinceOccupied",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Time Since Occupied"
          });
        }
      }) ];
      _roomDownlink_decorators = [ client.MapDownlink({
        laneUri: "stateRooms",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, value) {
          let roomController = this.owner.getChild(nodeUri.pathName, RoomController);
          let ecoModeEnabled = value.get("ecoModeEnabled").booleanValue(false);
          if (roomController === null && this.owner.listEcoMode === ecoModeEnabled) {
            roomController = new RoomController(nodeUri.toString(), this.owner.listEcoMode);
            roomController.leaf.insertView().set({
              style: {
                cursor: "pointer"
              }
            });
            roomController.deckCell.insertView();
            roomController.roomCell.insertView();
            roomController.hvacTempCell.insertView();
            roomController.timeSinceOccupiedCell.insertView();
            roomController.stats.set(value);
            this.owner.series.addController(roomController, null, nodeUri.pathName);
          }
          if (roomController !== null && this.owner.listEcoMode !== ecoModeEnabled) {
            this.owner.removeChild(nodeUri.pathName);
          }
        },
        didRemove(nodeUri) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        }
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        }
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tablePanel_decorators, {
        kind: "field",
        name: "tablePanel",
        static: false,
        private: false,
        access: {
          has: obj => "tablePanel" in obj,
          get: obj => obj.tablePanel,
          set: (obj, value) => {
            obj.tablePanel = value;
          }
        }
      }, _tablePanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        }
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _deckCol_decorators, {
        kind: "field",
        name: "deckCol",
        static: false,
        private: false,
        access: {
          has: obj => "deckCol" in obj,
          get: obj => obj.deckCol,
          set: (obj, value) => {
            obj.deckCol = value;
          }
        }
      }, _deckCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomCol_decorators, {
        kind: "field",
        name: "roomCol",
        static: false,
        private: false,
        access: {
          has: obj => "roomCol" in obj,
          get: obj => obj.roomCol,
          set: (obj, value) => {
            obj.roomCol = value;
          }
        }
      }, _roomCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacTempCol_decorators, {
        kind: "field",
        name: "hvacTempCol",
        static: false,
        private: false,
        access: {
          has: obj => "hvacTempCol" in obj,
          get: obj => obj.hvacTempCol,
          set: (obj, value) => {
            obj.hvacTempCol = value;
          }
        }
      }, _hvacTempCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeInProcessingCol_decorators, {
        kind: "field",
        name: "timeInProcessingCol",
        static: false,
        private: false,
        access: {
          has: obj => "timeInProcessingCol" in obj,
          get: obj => obj.timeInProcessingCol,
          set: (obj, value) => {
            obj.timeInProcessingCol = value;
          }
        }
      }, _timeInProcessingCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomDownlink_decorators, {
        kind: "field",
        name: "roomDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "roomDownlink" in obj,
          get: obj => obj.roomDownlink,
          set: (obj, value) => {
            obj.roomDownlink = value;
          }
        }
      }, _roomDownlink_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let DeckBoardController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class DeckBoardController extends panel.BoardController {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.initBoard();
        console.log("this inside DeckBoardController: ", this);
      }
      initBoard() {
        const boardView = this.sheet.attachView();
        const rootPanelView = boardView.appendChild(panel.PanelView).style.set({
          margin: 6
        });
        const recentlyOccupiedListController = this.appendChild(new RoomListController(false), `List${RoomStatus.recentlyOccupied}`);
        recentlyOccupiedListController.panel.insertView(rootPanelView).set({
          unitWidth: 1 / 2,
          unitHeight: 1,
          style: {
            margin: 6
          },
          headerTitle: "Recently Occupied Staterooms"
        });
        const ecoModeListController = this.appendChild(new RoomListController(true), `List${RoomStatus.ecoMode}`);
        ecoModeListController.panel.insertView(rootPanelView).set({
          unitWidth: 1 / 2,
          unitHeight: 1,
          style: {
            margin: 6
          },
          headerTitle: "Staterooms in EcoMode"
        });
      }
    }, (() => {
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          var _a;
          console.log("entityTrait.nodeUri.value?.stringValue: ", (_a = entityTrait.nodeUri.value) === null || _a === void 0 ? void 0 : _a.stringValue);
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        }
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        }
      }, _entity_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let DeckAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class DeckAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(DeckAspectTrait.icon);
      }
      createTabController() {
        return new DeckBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let DeckEntityTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    let _roomsRelation_decorators;
    let _roomsRelation_initializers = [];
    return _a = class DeckEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.roomsRelation = __runInitializers(this, _roomsRelation_initializers, void 0);
        this.icon.setIntrinsic(DeckEntityTrait.icon);
      }
      static get icon() {
        return graphics.PolygonIcon.create(3);
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: DeckAspectTrait,
        traitKey: "aspect"
      }) ];
      _roomsRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "rooms",
        traitType: RoomsRelationTrait,
        traitKey: "relation"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomsRelation_decorators, {
        kind: "field",
        name: "roomsRelation",
        static: false,
        private: false,
        access: {
          has: obj => "roomsRelation" in obj,
          get: obj => obj.roomsRelation,
          set: (obj, value) => {
            obj.roomsRelation = value;
          }
        }
      }, _roomsRelation_initializers, _instanceExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let DecksRelationTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _decks_decorators;
    let _decks_initializers = [];
    return _a = class DecksRelationTrait extends domain.RelationTrait {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.decks = __runInitializers(this, _decks_initializers, void 0);
        this.title.setIntrinsic("Decks");
        this.id.setIntrinsic("deck");
      }
    }, (() => {
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: DeckEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(deckTrait) {
          const deckId = deckTrait.id.value;
          deckTrait.title.setIntrinsic(`Deck ${deckId}`);
          deckTrait.nodeUri.setIntrinsic("/deck/" + deckId);
          deckTrait.portal.insertModel();
          deckTrait.roomsRelation.insertModel();
        },
        compareTraits(a, b) {
          var _a, _b;
          return util.Numbers.compare(Number.parseInt((_a = a.id.value) !== null && _a !== void 0 ? _a : "0"), Number.parseInt((_b = b.id.value) !== null && _b !== void 0 ? _b : "0"));
        }
      }) ];
      _decks_decorators = [ client.MapDownlink({
        laneUri: "decks",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let deckTrait = this.owner.entities.get(nodeUri.pathName);
          console.log("didUpdate in DecksRelationTrait: ", nodeUri.toString());
          if (deckTrait === null) {
            deckTrait = this.owner.entities.createTrait(nodeUri.pathName);
            deckTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(deckTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        }
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _decks_decorators, {
        kind: "field",
        name: "decks",
        static: false,
        private: false,
        access: {
          has: obj => "decks" in obj,
          get: obj => obj.decks,
          set: (obj, value) => {
            obj.decks = value;
          }
        }
      }, _decks_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let ShipAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class ShipAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(ShipAspectTrait.icon);
      }
      createTabController() {
        return new DeckBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let ShipEntityTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _portal_decorators;
    let _portal_initializers = [];
    let _decksRelation_decorators;
    let _decksRelation_initializers = [];
    return _a = class ShipEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.portal = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _portal_initializers, void 0));
        this.decksRelation = __runInitializers(this, _decksRelation_initializers, void 0);
        this.title.setIntrinsic("ship/icon");
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: ShipAspectTrait,
        traitKey: "aspect"
      }) ];
      _decksRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "decks",
        traitType: DecksRelationTrait,
        traitKey: "relation"
      }) ];
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _decksRelation_decorators, {
        kind: "field",
        name: "decksRelation",
        static: false,
        private: false,
        access: {
          has: obj => "decksRelation" in obj,
          get: obj => obj.decksRelation,
          set: (obj, value) => {
            obj.decksRelation = value;
          }
        }
      }, _decksRelation_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  exports.DeckAspectTrait = DeckAspectTrait;
  exports.DeckBoardController = DeckBoardController;
  exports.DeckEntityTrait = DeckEntityTrait;
  exports.DecksRelationTrait = DecksRelationTrait;
  exports.RoomAspectTrait = RoomAspectTrait;
  exports.RoomBoardController = RoomBoardController;
  exports.RoomController = RoomController;
  exports.RoomEntityTrait = RoomEntityTrait;
  exports.RoomListController = RoomListController;
  exports.RoomsRelationTrait = RoomsRelationTrait;
  exports.ShipAspectTrait = ShipAspectTrait;
  exports.ShipEntityTrait = ShipEntityTrait;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=royal-caribbean-demo.min.js.map
