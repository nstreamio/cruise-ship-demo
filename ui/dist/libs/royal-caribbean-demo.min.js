// @swim/royal-caribbean-demo v0.1.0 (c) 2015-2022 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@nstream/domain"), require("@swim/util"), require("@swim/model"), require("@swim/client"), require("@swim/graphics"), require("@swim/controller"), require("@swim/panel"), require("@swim/view"), require("@nstream/widget"), require("@swim/dom"), require("@swim/component"), require("@swim/uri"), require("@swim/table"), require("@swim/math"), require("@swim/theme")) : typeof define === "function" && define.amd ? define([ "exports", "@nstream/domain", "@swim/util", "@swim/model", "@swim/client", "@swim/graphics", "@swim/controller", "@swim/panel", "@swim/view", "@nstream/widget", "@swim/dom", "@swim/component", "@swim/uri", "@swim/table", "@swim/math", "@swim/theme" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim.royalcaribbeandemo = global.swim.royalcaribbeandemo || {}), global.nstream, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.nstream, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, domain, util, model, client, graphics, controller, panel, view, widget, dom, component, uri, table, math, theme) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P((function(resolve) {
        resolve(value);
      }));
    }
    return new (P || (P = Promise))((function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    }));
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let RoomDetailsController = (() => {
    var _a;
    let _classSuper = widget.TimeTableController;
    let _instanceExtraInitializers = [];
    let _detailsContainer_decorators;
    let _detailsContainer_initializers = [];
    let _shipCode_decorators;
    let _shipCode_initializers = [];
    let _deckNumber_decorators;
    let _deckNumber_initializers = [];
    let _roomNumber_decorators;
    let _roomNumber_initializers = [];
    let _hvacUnit_decorators;
    let _hvacUnit_initializers = [];
    let _hvacZone_decorators;
    let _hvacZone_initializers = [];
    let _infoDownlink_decorators;
    let _infoDownlink_initializers = [];
    return _a = class RoomDetailsController extends _classSuper {
      constructor() {
        super();
        this.detailsContainer = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _detailsContainer_initializers, void 0));
        this.shipCode = __runInitializers(this, _shipCode_initializers, void 0);
        this.deckNumber = __runInitializers(this, _deckNumber_initializers, void 0);
        this.roomNumber = __runInitializers(this, _roomNumber_initializers, void 0);
        this.hvacUnit = __runInitializers(this, _hvacUnit_initializers, void 0);
        this.hvacZone = __runInitializers(this, _hvacZone_initializers, void 0);
        this.infoDownlink = __runInitializers(this, _infoDownlink_initializers, void 0);
        this.initView();
        const query = window.location.search;
        const urlParams = new URLSearchParams(query);
        let host = urlParams.get("host");
        const baseUri = uri.Uri.parse(document.location.href);
        if (!host) {
          host = baseUri.base().withScheme(baseUri.schemeName === "https" ? "warps" : "warp").toString();
        }
        this.infoDownlink.setHostUri(host);
      }
      initView() {
        this.panel.insertView();
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _detailsContainer_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        extends: true,
        get parentView() {
          return this.owner.panel.attachView();
        },
        createView() {
          const divView = new dom.HtmlView(document.createElement("div")).set({
            style: {
              margin: 24
            },
            classList: [ "rbc-details-container" ]
          });
          const shipCodeView = divView.appendChild("p").set({
            style: {
              marginTop: 12,
              marginBottom: 12,
              fontSize: 16,
              fontFamily: "sans-serif"
            }
          });
          shipCodeView.node.innerText = `Ship code: ${this.owner.shipCode.value.valueOf()}`;
          const deckNumberView = divView.appendChild("p").set({
            style: {
              marginTop: 12,
              marginBottom: 12,
              fontSize: 16,
              fontFamily: "sans-serif"
            }
          });
          deckNumberView.node.innerText = `Deck number: ${this.owner.deckNumber.value.valueOf()}`;
          const roomNumberView = divView.appendChild("p").set({
            style: {
              marginTop: 12,
              marginBottom: 12,
              fontSize: 16,
              fontFamily: "sans-serif"
            }
          });
          roomNumberView.node.innerText = `Room number: ${this.owner.roomNumber.value.valueOf()}`;
          const hvacUnitView = divView.appendChild("p").set({
            style: {
              marginTop: 12,
              marginBottom: 12,
              fontSize: 16,
              fontFamily: "sans-serif"
            }
          });
          hvacUnitView.node.innerText = `HVAC unit: ${this.owner.hvacUnit.value.valueOf()}`;
          const hvacZoneView = divView.appendChild("p").set({
            style: {
              marginTop: 12,
              marginBottom: 12,
              fontSize: 16,
              fontFamily: "sans-serif"
            }
          });
          hvacZoneView.node.innerText = `HVAC zone: ${this.owner.hvacZone.value.valueOf()}`;
          return divView;
        }
      }) ];
      _shipCode_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _deckNumber_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _roomNumber_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _hvacUnit_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _hvacZone_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _infoDownlink_decorators = [ client.ValueDownlink({
        laneUri: "info",
        consumed: true,
        didSet(value) {
          var _b;
          if (!((_b = this.owner.panel.view) === null || _b === void 0 ? void 0 : _b.getChild("detailsContainer", dom.HtmlView))) {
            this.owner.shipCode.setValue(value.get("shipCode").stringValue(""));
            this.owner.deckNumber.setValue(value.get("deckNumber").stringValue(""));
            this.owner.roomNumber.setValue(value.get("roomNumber").stringValue(""));
            this.owner.hvacUnit.setValue(value.get("hvacUnit").stringValue(""));
            this.owner.hvacZone.setValue(value.get("hvacZone").stringValue(""));
            this.owner.detailsContainer.insertView(this.owner.panel.attachView());
          }
        }
      }) ];
      __esDecorate(null, null, _detailsContainer_decorators, {
        kind: "field",
        name: "detailsContainer",
        static: false,
        private: false,
        access: {
          has: obj => "detailsContainer" in obj,
          get: obj => obj.detailsContainer,
          set: (obj, value) => {
            obj.detailsContainer = value;
          }
        },
        metadata: _metadata
      }, _detailsContainer_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _shipCode_decorators, {
        kind: "field",
        name: "shipCode",
        static: false,
        private: false,
        access: {
          has: obj => "shipCode" in obj,
          get: obj => obj.shipCode,
          set: (obj, value) => {
            obj.shipCode = value;
          }
        },
        metadata: _metadata
      }, _shipCode_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _deckNumber_decorators, {
        kind: "field",
        name: "deckNumber",
        static: false,
        private: false,
        access: {
          has: obj => "deckNumber" in obj,
          get: obj => obj.deckNumber,
          set: (obj, value) => {
            obj.deckNumber = value;
          }
        },
        metadata: _metadata
      }, _deckNumber_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomNumber_decorators, {
        kind: "field",
        name: "roomNumber",
        static: false,
        private: false,
        access: {
          has: obj => "roomNumber" in obj,
          get: obj => obj.roomNumber,
          set: (obj, value) => {
            obj.roomNumber = value;
          }
        },
        metadata: _metadata
      }, _roomNumber_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacUnit_decorators, {
        kind: "field",
        name: "hvacUnit",
        static: false,
        private: false,
        access: {
          has: obj => "hvacUnit" in obj,
          get: obj => obj.hvacUnit,
          set: (obj, value) => {
            obj.hvacUnit = value;
          }
        },
        metadata: _metadata
      }, _hvacUnit_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacZone_decorators, {
        kind: "field",
        name: "hvacZone",
        static: false,
        private: false,
        access: {
          has: obj => "hvacZone" in obj,
          get: obj => obj.hvacZone,
          set: (obj, value) => {
            obj.hvacZone = value;
          }
        },
        metadata: _metadata
      }, _hvacZone_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _infoDownlink_decorators, {
        kind: "field",
        name: "infoDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "infoDownlink" in obj,
          get: obj => obj.infoDownlink,
          set: (obj, value) => {
            obj.infoDownlink = value;
          }
        },
        metadata: _metadata
      }, _infoDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let RoomBoardController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class RoomBoardController extends _classSuper {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.initBoard();
      }
      initBoard() {
        this.sheet.insertView();
        const rootPanelView = this.panel.insertView();
        const roomDetailsController = this.appendChild(RoomDetailsController, "roomDetailsController");
        roomDetailsController.panel.insertView(rootPanelView);
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _panel_decorators = [ view.ViewRef({
        viewType: panel.PanelView,
        extends: true,
        get parentView() {
          return this.owner.sheet.attachView();
        },
        createView() {
          return panel.PanelView.create().set({
            style: {
              margin: 6,
              backgroundColor: "#212121"
            },
            classList: [ "room-board-controller" ]
          });
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        },
        metadata: _metadata
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        },
        metadata: _metadata
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        },
        metadata: _metadata
      }, _entity_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let RoomAspectTrait = (() => {
    var _a;
    let _classSuper = domain.AspectTrait;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class RoomAspectTrait extends _classSuper {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(_a.icon);
      }
      createTabController() {
        return new RoomBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        },
        metadata: _metadata
      }, null, _staticExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let RoomEntityTrait = (() => {
    var _a;
    let _classSuper = domain.EntityTrait;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    return _a = class RoomEntityTrait extends _classSuper {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.icon.setIntrinsic(_a.icon);
      }
      static get icon() {
        return graphics.VectorIcon.create(40, 40, "M3.333,3.333L36.667,3.333L36.667,36.667L3.333,36.667Z");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: RoomAspectTrait,
        traitKey: "aspect"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        },
        metadata: _metadata
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        },
        metadata: _metadata
      }, _portal_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let RoomsRelationTrait = (() => {
    var _a;
    let _classSuper = domain.RelationTrait;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _rooms_decorators;
    let _rooms_initializers = [];
    return _a = class RoomsRelationTrait extends _classSuper {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.rooms = __runInitializers(this, _rooms_initializers, void 0);
        this.title.setIntrinsic("Rooms");
        this.id.setIntrinsic("room");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: RoomEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(roomTrait) {
          const roomId = roomTrait.id.value;
          roomTrait.title.setIntrinsic(roomId);
          const roomTraitNodeUri = this.owner.nodeUri.value + "/room/" + roomId;
          roomTrait.nodeUri.setIntrinsic(roomTraitNodeUri);
          roomTrait.portal.insertModel();
        },
        compareTraits(a, b) {
          var _b, _c;
          return util.Numbers.compare(Number.parseInt((_b = a.id.value) !== null && _b !== void 0 ? _b : "0"), Number.parseInt((_c = b.id.value) !== null && _c !== void 0 ? _c : "0"));
        }
      }) ];
      _rooms_decorators = [ client.MapDownlink({
        laneUri: "stateRooms",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let roomTrait = this.owner.entities.get(nodeUri.pathName);
          if (roomTrait === null) {
            roomTrait = this.owner.entities.createTrait(nodeUri.pathName);
            roomTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(roomTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        },
        metadata: _metadata
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _rooms_decorators, {
        kind: "field",
        name: "rooms",
        static: false,
        private: false,
        access: {
          has: obj => "rooms" in obj,
          get: obj => obj.rooms,
          set: (obj, value) => {
            obj.rooms = value;
          }
        },
        metadata: _metadata
      }, _rooms_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  const OCC_DETECTED_THRESHOLD = 1e3 * 60 * 10;
  let RoomController = (() => {
    var _a;
    let _classSuper = widget.TimeSeriesController;
    let _instanceExtraInitializers = [];
    let _roomSavings_decorators;
    let _roomSavings_initializers = [];
    let _deckCell_decorators;
    let _deckCell_initializers = [];
    let _roomCell_decorators;
    let _roomCell_initializers = [];
    let _hvacTempCell_decorators;
    let _hvacTempCell_initializers = [];
    let _timeSinceOccupiedCell_decorators;
    let _timeSinceOccupiedCell_initializers = [];
    let _statusDownlink_decorators;
    let _statusDownlink_initializers = [];
    return _a = class RoomController extends _classSuper {
      constructor(nodeUri, deckNumber, roomNumber, ecoMode) {
        super();
        this.deckNumber = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.ecoMode = true;
        this.intervalId = null;
        this.roomSavings = __runInitializers(this, _roomSavings_initializers, void 0);
        this.deckCell = __runInitializers(this, _deckCell_initializers, void 0);
        this.roomCell = __runInitializers(this, _roomCell_initializers, void 0);
        this.hvacTempCell = __runInitializers(this, _hvacTempCell_initializers, void 0);
        this.timeSinceOccupiedCell = __runInitializers(this, _timeSinceOccupiedCell_initializers, void 0);
        this.statusDownlink = __runInitializers(this, _statusDownlink_initializers, void 0);
        this.setKey(nodeUri);
        this.nodeUri.setValue(nodeUri);
        this.deckNumber = deckNumber;
        this.roomNumber = roomNumber;
        this.ecoMode = ecoMode;
      }
      willUnmount() {
        if (this.intervalId) {
          window.clearInterval(this.intervalId);
          this.intervalId = null;
        }
      }
      onMount() {
        this.deckCell.insertView().set({
          content: this.deckNumber,
          classList: [ "deck-cell-view" ]
        });
        this.roomCell.insertView().set({
          content: this.roomNumber,
          classList: [ "room-cell-view" ]
        });
        this.hvacTempCell.insertView();
        this.timeSinceOccupiedCell.insertView();
        this.updateCellsMood();
        this.statusDownlink.open();
      }
      updateCellsContent(occupancyDetected, hvacTemp, disembarked) {
        this.hvacTempCell.attachView().set({
          content: hvacTemp.toString(),
          classList: [ "hvac-temp-cell-view" ]
        });
        const msSinceOccupied = Date.now() - occupancyDetected;
        const hoursSinceOccupied = Math.max(0, Math.floor(msSinceOccupied / 1e3 / 60 / 60));
        const minutesSinceOccupied = Math.max(0, Math.floor(msSinceOccupied / 1e3 / 60 % 60));
        const secondsSinceOccupied = Math.max(0, Math.floor(msSinceOccupied / 1e3 % 60));
        let content;
        if (disembarked) {
          content = "Disembarked";
        } else if (hoursSinceOccupied) {
          content = `${hoursSinceOccupied}h ${minutesSinceOccupied}m ${secondsSinceOccupied}s`;
        } else if (minutesSinceOccupied) {
          content = `${minutesSinceOccupied}m ${secondsSinceOccupied}s`;
        } else {
          content = `${secondsSinceOccupied}s`;
        }
        this.timeSinceOccupiedCell.attachView().set({
          content: content,
          classList: [ "time-in-processing-cell-view" ]
        });
        this.updateCellsMood(occupancyDetected);
      }
      updateCellsMood(occupancyDetected = Date.now().valueOf()) {
        const cells = [ this.deckCell.attachView(), this.roomCell.attachView(), this.hvacTempCell.attachView(), this.timeSinceOccupiedCell.attachView() ];
        if (!this.ecoMode) {
          const portionToThreshold = (Date.now().valueOf() - occupancyDetected) / OCC_DETECTED_THRESHOLD;
          let moodStatus = domain.Status.improving(0, 1, 2, 3, 4)(portionToThreshold * 1.1 + 1);
          cells.forEach((c => {
            c.set({
              classList: []
            }).modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }));
        } else {
          cells.forEach((c => {
            c.set({
              classList: [ "ecoModeEnabled" ]
            });
          }));
        }
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _roomSavings_decorators = [ component.Property({
        valueType: Number,
        value: 0,
        didSetValue(newValue = 0, oldValue = 0) {
          const deckBoardController = this.owner.getAncestor(DeckBoardController);
          if (deckBoardController) {
            if (oldValue === 0 && deckBoardController.initialRoomSavingsAccountedFor[this.owner.roomNumber] === true) {
              return;
            } else if (oldValue === 0 && deckBoardController.initialRoomSavingsAccountedFor[this.owner.roomNumber] === false) {
              deckBoardController.incrementDeckSavings(newValue - oldValue);
              deckBoardController.initialRoomSavingsAccountedFor[this.owner.roomNumber] = true;
            } else {
              deckBoardController.incrementDeckSavings(newValue - oldValue);
            }
          }
        }
      }) ];
      _deckCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "deck",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _roomCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "room",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _hvacTempCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "hvacTemp",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _timeSinceOccupiedCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "timeSinceOccupied",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _statusDownlink_decorators = [ client.ValueDownlink({
        laneUri: "status",
        inherits: true,
        consumed: true,
        didLink() {
          this.owner.intervalId = window.setInterval((() => {
            var _b;
            if (this.opened && ((_b = this === null || this === void 0 ? void 0 : this.get) === null || _b === void 0 ? void 0 : _b.call(this))) {
              this.owner.updateCellsContent(this.get().get("occupancyDetected").numberValue(0), this.get().get("hvacTemperature").numberValue(0), this.get().get("disembarked").booleanValue(false));
            }
          }), Math.random() * 20 * 1e3 + 20 * 1e3);
        },
        didUnlink() {
          if (this.owner.intervalId) {
            window.clearInterval(this.owner.intervalId);
            this.owner.intervalId = null;
          }
        },
        didSet(value) {
          const occupancyDetected = value.get("occupancyDetected").numberValue(0);
          const hvacTemp = value.get("hvacTemperature").numberValue(0);
          const disembarked = value.get("disembarked").booleanValue(false);
          this.owner.updateCellsContent(occupancyDetected, hvacTemp, disembarked);
          const savings = value.get("savings").numberValue(0);
          this.owner.roomSavings.setValue(savings);
        }
      }) ];
      __esDecorate(null, null, _roomSavings_decorators, {
        kind: "field",
        name: "roomSavings",
        static: false,
        private: false,
        access: {
          has: obj => "roomSavings" in obj,
          get: obj => obj.roomSavings,
          set: (obj, value) => {
            obj.roomSavings = value;
          }
        },
        metadata: _metadata
      }, _roomSavings_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _deckCell_decorators, {
        kind: "field",
        name: "deckCell",
        static: false,
        private: false,
        access: {
          has: obj => "deckCell" in obj,
          get: obj => obj.deckCell,
          set: (obj, value) => {
            obj.deckCell = value;
          }
        },
        metadata: _metadata
      }, _deckCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomCell_decorators, {
        kind: "field",
        name: "roomCell",
        static: false,
        private: false,
        access: {
          has: obj => "roomCell" in obj,
          get: obj => obj.roomCell,
          set: (obj, value) => {
            obj.roomCell = value;
          }
        },
        metadata: _metadata
      }, _roomCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacTempCell_decorators, {
        kind: "field",
        name: "hvacTempCell",
        static: false,
        private: false,
        access: {
          has: obj => "hvacTempCell" in obj,
          get: obj => obj.hvacTempCell,
          set: (obj, value) => {
            obj.hvacTempCell = value;
          }
        },
        metadata: _metadata
      }, _hvacTempCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeSinceOccupiedCell_decorators, {
        kind: "field",
        name: "timeSinceOccupiedCell",
        static: false,
        private: false,
        access: {
          has: obj => "timeSinceOccupiedCell" in obj,
          get: obj => obj.timeSinceOccupiedCell,
          set: (obj, value) => {
            obj.timeSinceOccupiedCell = value;
          }
        },
        metadata: _metadata
      }, _timeSinceOccupiedCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusDownlink_decorators, {
        kind: "field",
        name: "statusDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statusDownlink" in obj,
          get: obj => obj.statusDownlink,
          set: (obj, value) => {
            obj.statusDownlink = value;
          }
        },
        metadata: _metadata
      }, _statusDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let RoomListController = (() => {
    var _a;
    let _classSuper = widget.TimeTableController;
    let _instanceExtraInitializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _tablePanel_decorators;
    let _tablePanel_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _deckCol_decorators;
    let _deckCol_initializers = [];
    let _roomCol_decorators;
    let _roomCol_initializers = [];
    let _hvacTempCol_decorators;
    let _hvacTempCol_initializers = [];
    let _timeInProcessingCol_decorators;
    let _timeInProcessingCol_initializers = [];
    let _series_decorators;
    let _series_initializers = [];
    let _roomDownlink_decorators;
    let _roomDownlink_initializers = [];
    return _a = class RoomListController extends _classSuper {
      constructor(listEcoMode) {
        super();
        this.listEcoMode = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.tablePanel = __runInitializers(this, _tablePanel_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.deckCol = __runInitializers(this, _deckCol_initializers, void 0);
        this.roomCol = __runInitializers(this, _roomCol_initializers, void 0);
        this.hvacTempCol = __runInitializers(this, _hvacTempCol_initializers, void 0);
        this.timeInProcessingCol = __runInitializers(this, _timeInProcessingCol_initializers, void 0);
        this.series = __runInitializers(this, _series_initializers, void 0);
        this.roomDownlink = __runInitializers(this, _roomDownlink_initializers, void 0);
        this.setKey(`RoomListController-${listEcoMode ? "ecoMode" : "recentlyOccupied"}`);
        this.listEcoMode = listEcoMode;
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(panelView) {
          super.initView(panelView);
          this.owner.tablePanel.insertView().set({
            unitWidth: 1,
            unitHeight: 1,
            minFrameHeight: 0,
            minFrameWidth: 0,
            style: {
              marginTop: 48,
              marginBottom: 24
            },
            classList: [ "rlc-table-panel" ]
          });
          this.owner.table.insertView();
          this.owner.header.insertView();
        }
      }) ];
      _header_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          const headerView = super.createView();
          this.owner.deckCol.insertView(headerView);
          this.owner.roomCol.insertView(headerView);
          this.owner.hvacTempCol.insertView(headerView);
          this.owner.timeInProcessingCol.insertView(headerView);
          return headerView;
        }
      }) ];
      _tablePanel_decorators = [ view.ViewRef({
        extends: true,
        initView(tablePanelView) {
          super.initView(tablePanelView);
          tablePanelView.set({
            style: {
              margin: 0,
              marginTop: 36
            }
          });
        }
      }) ];
      _table_decorators = [ view.ViewRef({
        extends: true,
        createLayout() {
          const cols = new Array;
          cols.push(table.ColLayout.create("deck", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("room", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("hvacTemp", 1, 1, "100px", false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("timeSinceOccupied", 2, 2, "144px", false, false, theme.Look.accentColor));
          return new table.TableLayout(null, null, null, math.Length.px(12), cols);
        }
      }) ];
      _deckCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "deck",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Deck"
          });
        }
      }) ];
      _roomCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "room",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Stateroom"
          });
        }
      }) ];
      _hvacTempCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "hvacTemp",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "HVAC Temp"
          });
        }
      }) ];
      _timeInProcessingCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "timeSinceOccupied",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Time Since Occupied"
          });
        }
      }) ];
      _series_decorators = [ controller.ControllerSet({
        sorted: true,
        extends: true,
        controllerType: RoomController,
        compare(a, b) {
          return Number.parseInt(a.roomNumber) - Number.parseInt(b.roomNumber);
        }
      }) ];
      _roomDownlink_decorators = [ client.MapDownlink({
        laneUri: "stateRooms",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, value) {
          var _b;
          let roomController = this.owner.getChild(nodeUri.pathName, RoomController);
          let ecoModeEnabled = value.get("ecoModeEnabled").booleanValue(false);
          let disembarked = value.get("disembarked").booleanValue(false);
          if (roomController === null && this.owner.listEcoMode === (ecoModeEnabled || disembarked)) {
            const regexResult = (_b = /\/ship\/\w+\/deck\/(\d+)\/room\/(\d+)/.exec(nodeUri.toString())) !== null && _b !== void 0 ? _b : [ null, "", "" ];
            const deckNumber = regexResult[1];
            const roomNumber = regexResult[2];
            const deckBoardController = this.owner.getAncestor(DeckBoardController);
            if (deckBoardController && deckBoardController.initialRoomSavingsAccountedFor[roomNumber] === undefined) {
              deckBoardController.initialRoomSavingsAccountedFor[roomNumber] = false;
            }
            roomController = new RoomController(nodeUri.toString(), deckNumber, roomNumber, this.owner.listEcoMode);
            roomController.leaf.insertView().set({
              style: {
                cursor: "pointer"
              }
            });
            roomController.deckCell.insertView();
            roomController.roomCell.insertView();
            roomController.hvacTempCell.insertView();
            roomController.timeSinceOccupiedCell.insertView();
            this.owner.series.addController(roomController, null, nodeUri.pathName);
          }
          if (roomController !== null && this.owner.listEcoMode !== (ecoModeEnabled || disembarked)) {
            this.owner.removeChild(nodeUri.pathName);
          }
        },
        didRemove(nodeUri) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        },
        metadata: _metadata
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        },
        metadata: _metadata
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tablePanel_decorators, {
        kind: "field",
        name: "tablePanel",
        static: false,
        private: false,
        access: {
          has: obj => "tablePanel" in obj,
          get: obj => obj.tablePanel,
          set: (obj, value) => {
            obj.tablePanel = value;
          }
        },
        metadata: _metadata
      }, _tablePanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        },
        metadata: _metadata
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _deckCol_decorators, {
        kind: "field",
        name: "deckCol",
        static: false,
        private: false,
        access: {
          has: obj => "deckCol" in obj,
          get: obj => obj.deckCol,
          set: (obj, value) => {
            obj.deckCol = value;
          }
        },
        metadata: _metadata
      }, _deckCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomCol_decorators, {
        kind: "field",
        name: "roomCol",
        static: false,
        private: false,
        access: {
          has: obj => "roomCol" in obj,
          get: obj => obj.roomCol,
          set: (obj, value) => {
            obj.roomCol = value;
          }
        },
        metadata: _metadata
      }, _roomCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hvacTempCol_decorators, {
        kind: "field",
        name: "hvacTempCol",
        static: false,
        private: false,
        access: {
          has: obj => "hvacTempCol" in obj,
          get: obj => obj.hvacTempCol,
          set: (obj, value) => {
            obj.hvacTempCol = value;
          }
        },
        metadata: _metadata
      }, _hvacTempCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeInProcessingCol_decorators, {
        kind: "field",
        name: "timeInProcessingCol",
        static: false,
        private: false,
        access: {
          has: obj => "timeInProcessingCol" in obj,
          get: obj => obj.timeInProcessingCol,
          set: (obj, value) => {
            obj.timeInProcessingCol = value;
          }
        },
        metadata: _metadata
      }, _timeInProcessingCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _series_decorators, {
        kind: "field",
        name: "series",
        static: false,
        private: false,
        access: {
          has: obj => "series" in obj,
          get: obj => obj.series,
          set: (obj, value) => {
            obj.series = value;
          }
        },
        metadata: _metadata
      }, _series_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomDownlink_decorators, {
        kind: "field",
        name: "roomDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "roomDownlink" in obj,
          get: obj => obj.roomDownlink,
          set: (obj, value) => {
            obj.roomDownlink = value;
          }
        },
        metadata: _metadata
      }, _roomDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  var OrderType;
  (function(OrderType) {
    OrderType["OrderA"] = "A";
    OrderType["OrderB"] = "B";
    OrderType["OrderC"] = "C";
    OrderType["Unknown"] = "Unknown";
  })(OrderType || (OrderType = {}));
  var RoomStatus;
  (function(RoomStatus) {
    RoomStatus["recentlyOccupied"] = "recentlyOccupied";
    RoomStatus["ecoMode"] = "ecoMode";
    RoomStatus["readyForPickup"] = "readyForPickup";
    RoomStatus["pickupCompleted"] = "pickupCompleted";
  })(RoomStatus || (RoomStatus = {}));
  class DeckColumnController extends panel.PanelController {
    constructor() {
      super();
    }
  }
  let SavingsController = (() => {
    var _a;
    let _classSuper = panel.PanelController;
    let _instanceExtraInitializers = [];
    let _deckSavings_decorators;
    let _deckSavings_initializers = [];
    let _content_decorators;
    let _content_initializers = [];
    return _a = class SavingsController extends _classSuper {
      constructor(deckNumber) {
        super();
        this.deckNumber = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.deckSavings = __runInitializers(this, _deckSavings_initializers, void 0);
        this.content = __runInitializers(this, _content_initializers, void 0);
        this.deckNumber = deckNumber;
      }
      onMount() {
        const panelView = this.panel.attachView().set({
          style: {
            backgroundColor: "#212121"
          },
          classList: [ "savings-controller-panel" ]
        });
        this.content.insertView(panelView);
      }
      getTimeText(num) {
        let hoursText = "";
        if (num >= 1) {
          hoursText = `${Math.floor(num)} hours`;
        }
        let minutesText = "";
        if ((num % 1).toFixed(2) !== "0.00") {
          let minutes = (num % 1 * 60).toFixed(0);
          minutesText = `${minutes} minutes`;
        }
        const result = `${hoursText}${hoursText && minutesText ? " and " : ""}${minutesText}`;
        return result || "No time";
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _deckSavings_decorators = [ component.Property({
        valueType: Number,
        value: 0,
        inherits: true,
        extends: true,
        didSetValue(newValue = 0, oldValue = 0) {
          const savingsTimeTextEl = document.getElementById("savings-time-text");
          if (savingsTimeTextEl) {
            savingsTimeTextEl.innerText = `${this.owner.getTimeText(Number.parseFloat(newValue.toFixed(2)))} spent in EcoMode`;
          }
          const savingsMoneyTextEl = document.getElementById("savings-money-text");
          if (savingsMoneyTextEl) {
            savingsMoneyTextEl.innerText = `Deck ${this.owner.deckNumber}'s savings: $${newValue.toFixed(2)}`;
          }
        }
      }) ];
      _content_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const containerView = new dom.HtmlView(document.createElement("div")).set({
            style: {
              backgroundColor: "#212121",
              display: "flex",
              width: "100%",
              height: "100%",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center"
            }
          });
          const pTimeView = new dom.HtmlView(document.createElement("p")).set({
            style: {
              fontSize: "18px",
              textAlign: "center"
            },
            text: `${this.owner.getTimeText(Number.parseFloat(this.owner.deckSavings.value.toFixed(2)))} spent in EcoMode`
          });
          pTimeView.node.id = "savings-time-text";
          containerView.appendChild(pTimeView);
          const pMoneyView = new dom.HtmlView(document.createElement("p")).set({
            style: {
              fontSize: "18px",
              textAlign: "center"
            },
            text: `Deck ${this.owner.deckNumber}'s savings: $${this.owner.deckSavings.value.toFixed(2)}`
          });
          pMoneyView.node.id = "savings-money-text";
          containerView.appendChild(pMoneyView);
          return containerView;
        }
      }) ];
      __esDecorate(null, null, _deckSavings_decorators, {
        kind: "field",
        name: "deckSavings",
        static: false,
        private: false,
        access: {
          has: obj => "deckSavings" in obj,
          get: obj => obj.deckSavings,
          set: (obj, value) => {
            obj.deckSavings = value;
          }
        },
        metadata: _metadata
      }, _deckSavings_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _content_decorators, {
        kind: "field",
        name: "content",
        static: false,
        private: false,
        access: {
          has: obj => "content" in obj,
          get: obj => obj.content,
          set: (obj, value) => {
            obj.content = value;
          }
        },
        metadata: _metadata
      }, _content_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let BadgePanelController = (() => {
    var _a;
    let _classSuper = panel.PanelController;
    let _instanceExtraInitializers = [];
    let _container_decorators;
    let _container_initializers = [];
    let _inputView_decorators;
    let _inputView_initializers = [];
    let _simulateDownlink_decorators;
    let _simulateDownlink_initializers = [];
    return _a = class BadgePanelController extends _classSuper {
      constructor() {
        super();
        this.container = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _container_initializers, void 0));
        this.inputView = __runInitializers(this, _inputView_initializers, void 0);
        this.simulateDownlink = __runInitializers(this, _simulateDownlink_initializers, void 0);
      }
      onMount() {
        const panelView = this.panel.view;
        this.container.insertView(panelView);
      }
      swipeBadge(roomNumber) {
        return __awaiter(this, void 0, void 0, (function*() {
          const urlParams = new URLSearchParams(window.location.search);
          let host = urlParams.get("host");
          const baseUri = uri.Uri.parse(document.location.href);
          if (!host) {
            host = baseUri.base().withScheme("http").toString();
          } else if (host.startsWith("warp")) {
            host = `http${host.slice(4)}`;
          }
          const deckNumber = roomNumber.toString().split("").slice(0, roomNumber > 9999 ? 2 : 1).join("");
          this.inputView.attachView().node.disabled = true;
          const url = `${host}${host.endsWith("/") ? "" : "/"}ship/icon/deck/${deckNumber}/room/${roomNumber}?lane=simulate&action=swipeBadge`;
          yield fetch(url, {
            method: "POST",
            mode: "no-cors",
            cache: "no-cache"
          });
          this.inputView.attachView().node.disabled = false;
        }));
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _container_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const containerView = new dom.HtmlView(document.createElement("div")).set({
            style: {
              display: "flex",
              position: "relative",
              backgroundColor: "#212121",
              borderRadius: "4px",
              flexDirection: "row",
              justifyContent: "flex-start",
              alignItems: "center",
              marginLeft: "6px"
            }
          });
          containerView.node.style.width = "calc(100% - 12px)";
          containerView.node.style.height = "calc(100% - 6px)";
          const header = new dom.HtmlView(document.createElement("p")).set({
            style: {
              position: "absolute",
              top: "6px",
              left: "12px",
              fontSize: "14px",
              color: "#E2E2E2",
              opacity: .55,
              margin: "0px"
            },
            text: "Dev Panel"
          });
          containerView.appendChild(header);
          const form = new dom.HtmlView(document.createElement("form")).set({
            style: {
              marginLeft: "93px"
            }
          });
          const that = this;
          form.node.addEventListener("submit", (function(e) {
            var _b;
            e.preventDefault();
            const roomNumber = Number.parseInt((_b = new FormData(e.target).get("roomNumber")) !== null && _b !== void 0 ? _b : "");
            that.owner.swipeBadge(roomNumber);
          }));
          containerView.appendChild(form);
          const label = new dom.HtmlView(document.createElement("label")).set({
            style: {
              fontSize: "14px",
              color: "#CCCCCC",
              textAlign: "center"
            },
            text: "Badge guest in/out"
          });
          form.appendChild(label);
          this.owner.inputView.insertView(label);
          const submit = new dom.HtmlView(document.createElement("input")).set({
            style: {
              fontSize: "14px",
              color: "#000000",
              backgroundColor: "#CCCCCC",
              borderRadius: "4px",
              textAlign: "center",
              padding: "2px 6px",
              width: "72px",
              cursor: "pointer",
              boxShadow: "none",
              borderColor: "transparent",
              borderStyle: "none",
              borderWidth: "0px"
            },
            text: "Submit"
          });
          submit.node.type = "submit";
          form.appendChild(submit);
          return containerView;
        }
      }) ];
      _inputView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const input = new dom.HtmlView(document.createElement("input")).set({
            style: {
              fontSize: "14px",
              backgroundColor: "#444444",
              borderRadius: "4px",
              textAlign: "left",
              width: "80px",
              paddingTop: "0px",
              paddingRight: "4px",
              paddingBottom: "0px",
              paddingLeft: "4px",
              marginTop: "0px",
              marginRight: "12px",
              marginBottom: "0px",
              marginLeft: "12px"
            }
          });
          input.node.type = "text";
          input.node.name = "roomNumber";
          input.node.placeholder = "Room #";
          return input;
        }
      }) ];
      _simulateDownlink_decorators = [ client.MapDownlink({
        laneUri: "simulate",
        keyForm: uri.Uri.form()
      }) ];
      __esDecorate(null, null, _container_decorators, {
        kind: "field",
        name: "container",
        static: false,
        private: false,
        access: {
          has: obj => "container" in obj,
          get: obj => obj.container,
          set: (obj, value) => {
            obj.container = value;
          }
        },
        metadata: _metadata
      }, _container_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _inputView_decorators, {
        kind: "field",
        name: "inputView",
        static: false,
        private: false,
        access: {
          has: obj => "inputView" in obj,
          get: obj => obj.inputView,
          set: (obj, value) => {
            obj.inputView = value;
          }
        },
        metadata: _metadata
      }, _inputView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _simulateDownlink_decorators, {
        kind: "field",
        name: "simulateDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "simulateDownlink" in obj,
          get: obj => obj.simulateDownlink,
          set: (obj, value) => {
            obj.simulateDownlink = value;
          }
        },
        metadata: _metadata
      }, _simulateDownlink_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  class ColumnsPanelController extends panel.PanelController {
    constructor() {
      super();
    }
  }
  let DeckBoardController = (() => {
    var _a;
    let _classSuper = panel.BoardController;
    let _instanceExtraInitializers = [];
    let _deckSavings_decorators;
    let _deckSavings_initializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class DeckBoardController extends _classSuper {
      constructor() {
        var _b;
        super();
        this.deckNumber = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.initialRoomSavingsAccountedFor = {};
        this.deckSavings = __runInitializers(this, _deckSavings_initializers, void 0);
        this.sheet = __runInitializers(this, _sheet_initializers, void 0);
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.deckNumber = Number.parseInt(((_b = /\/deck\/(\d+)/.exec(window.location.href)) !== null && _b !== void 0 ? _b : [ null, "3" ])[1]);
        this.initBoard();
      }
      initBoard() {
        const boardView = this.sheet.attachView();
        const rootPanelView = boardView.appendChild(panel.PanelView).style.set({
          margin: 6
        });
        const badgePanelController = this.appendChild(new BadgePanelController);
        badgePanelController.panel.insertView(rootPanelView).set({
          unitWidth: 1,
          unitHeight: 1 / 16,
          style: {
            height: 64
          }
        });
        const columnsPanelController = this.appendChild(new ColumnsPanelController);
        const columnsPanelView = columnsPanelController.panel.insertView(rootPanelView).set({
          unitWidth: 1,
          unitHeight: 15 / 16,
          minFrameHeight: 72
        });
        const recentlyOccupiedListController = this.appendChild(new RoomListController(false), `List${RoomStatus.recentlyOccupied}`);
        recentlyOccupiedListController.panel.insertView(columnsPanelView).set({
          unitWidth: 1 / 2,
          unitHeight: 1,
          style: {
            margin: 6
          },
          headerTitle: "Recently Occupied Staterooms"
        });
        const ecoModeColumnController = this.appendChild(new DeckColumnController);
        const ecoModeColumnPanelView = ecoModeColumnController.panel.insertView(columnsPanelView).set({
          unitWidth: 1 / 2,
          unitHeight: 1
        });
        const ecoModeListController = ecoModeColumnController.appendChild(new RoomListController(true), `List${RoomStatus.ecoMode}`);
        ecoModeListController.panel.insertView(ecoModeColumnPanelView).set({
          unitWidth: 1,
          unitHeight: 3 / 4,
          headerTitle: "Staterooms in EcoMode"
        });
        const ecoModeSavingsController = ecoModeColumnController.appendChild(new SavingsController(this.deckNumber), `SavingsController`);
        ecoModeSavingsController.panel.insertView(ecoModeColumnPanelView).set({
          unitWidth: 1,
          unitHeight: 1 / 4,
          style: {
            margin: 6
          },
          headerTitle: "EcoMode Savings"
        });
      }
      incrementDeckSavings(num) {
        const currentValue = this.deckSavings.value;
        const newValue = currentValue + num;
        this.deckSavings.setValue(newValue);
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _deckSavings_decorators = [ component.Property({
        valueType: Number,
        value: 0
      }) ];
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _deckSavings_decorators, {
        kind: "field",
        name: "deckSavings",
        static: false,
        private: false,
        access: {
          has: obj => "deckSavings" in obj,
          get: obj => obj.deckSavings,
          set: (obj, value) => {
            obj.deckSavings = value;
          }
        },
        metadata: _metadata
      }, _deckSavings_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        },
        metadata: _metadata
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        },
        metadata: _metadata
      }, _entity_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let DeckAspectTrait = (() => {
    var _a;
    let _classSuper = domain.AspectTrait;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class DeckAspectTrait extends _classSuper {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(_a.icon);
      }
      createTabController() {
        return new DeckBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        },
        metadata: _metadata
      }, null, _staticExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let DeckEntityTrait = (() => {
    var _a;
    let _classSuper = domain.EntityTrait;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    let _roomsRelation_decorators;
    let _roomsRelation_initializers = [];
    return _a = class DeckEntityTrait extends _classSuper {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.roomsRelation = __runInitializers(this, _roomsRelation_initializers, void 0);
        this.icon.setIntrinsic(_a.icon);
      }
      static get icon() {
        return graphics.PolygonIcon.create(3);
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: DeckAspectTrait,
        traitKey: "aspect"
      }) ];
      _roomsRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "rooms",
        traitType: RoomsRelationTrait,
        traitKey: "relation"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        },
        metadata: _metadata
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        },
        metadata: _metadata
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _roomsRelation_decorators, {
        kind: "field",
        name: "roomsRelation",
        static: false,
        private: false,
        access: {
          has: obj => "roomsRelation" in obj,
          get: obj => obj.roomsRelation,
          set: (obj, value) => {
            obj.roomsRelation = value;
          }
        },
        metadata: _metadata
      }, _roomsRelation_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let DecksRelationTrait = (() => {
    var _a;
    let _classSuper = domain.RelationTrait;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _decks_decorators;
    let _decks_initializers = [];
    return _a = class DecksRelationTrait extends _classSuper {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.decks = __runInitializers(this, _decks_initializers, void 0);
        this.title.setIntrinsic("Decks");
        this.id.setIntrinsic("deck");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: DeckEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(deckTrait) {
          const deckId = deckTrait.id.value;
          deckTrait.title.setIntrinsic(`Deck ${deckId}`);
          deckTrait.nodeUri.setIntrinsic("/ship/icon/deck/" + deckId);
          deckTrait.portal.insertModel();
          deckTrait.roomsRelation.insertModel();
        },
        compareTraits(a, b) {
          var _b, _c;
          return util.Numbers.compare(Number.parseInt((_b = a.id.value) !== null && _b !== void 0 ? _b : "0"), Number.parseInt((_c = b.id.value) !== null && _c !== void 0 ? _c : "0"));
        }
      }) ];
      _decks_decorators = [ client.MapDownlink({
        laneUri: "decks",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let deckTrait = this.owner.entities.get(nodeUri.pathName);
          if (deckTrait === null) {
            deckTrait = this.owner.entities.createTrait(nodeUri.pathName);
            deckTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(deckTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        },
        metadata: _metadata
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _decks_decorators, {
        kind: "field",
        name: "decks",
        static: false,
        private: false,
        access: {
          has: obj => "decks" in obj,
          get: obj => obj.decks,
          set: (obj, value) => {
            obj.decks = value;
          }
        },
        metadata: _metadata
      }, _decks_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  let ShipAspectTrait = (() => {
    var _a;
    let _classSuper = domain.AspectTrait;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class ShipAspectTrait extends _classSuper {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(_a.icon);
      }
      createTabController() {
        return (new DeckBoardController).set({
          nodeUri: "/ship/icon/deck/3"
        });
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        },
        metadata: _metadata
      }, null, _staticExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let ShipEntityTrait = (() => {
    var _a;
    let _classSuper = domain.EntityTrait;
    let _instanceExtraInitializers = [];
    let _portal_decorators;
    let _portal_initializers = [];
    let _decksRelation_decorators;
    let _decksRelation_initializers = [];
    return _a = class ShipEntityTrait extends _classSuper {
      constructor() {
        super();
        this.portal = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _portal_initializers, void 0));
        this.decksRelation = __runInitializers(this, _decksRelation_initializers, void 0);
        this.title.setIntrinsic("ship/icon");
      }
    }, (() => {
      var _b;
      const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_b = _classSuper[Symbol.metadata]) !== null && _b !== void 0 ? _b : null) : void 0;
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: ShipAspectTrait,
        traitKey: "aspect"
      }) ];
      _decksRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "decks",
        traitType: DecksRelationTrait,
        traitKey: "relation"
      }) ];
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        },
        metadata: _metadata
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _decksRelation_decorators, {
        kind: "field",
        name: "decksRelation",
        static: false,
        private: false,
        access: {
          has: obj => "decksRelation" in obj,
          get: obj => obj.decksRelation,
          set: (obj, value) => {
            obj.decksRelation = value;
          }
        },
        metadata: _metadata
      }, _decksRelation_initializers, _instanceExtraInitializers);
      if (_metadata) Object.defineProperty(_a, Symbol.metadata, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: _metadata
      });
    })(), _a;
  })();
  exports.DeckAspectTrait = DeckAspectTrait;
  exports.DeckBoardController = DeckBoardController;
  exports.DeckEntityTrait = DeckEntityTrait;
  exports.DecksRelationTrait = DecksRelationTrait;
  exports.RoomAspectTrait = RoomAspectTrait;
  exports.RoomBoardController = RoomBoardController;
  exports.RoomController = RoomController;
  exports.RoomEntityTrait = RoomEntityTrait;
  exports.RoomListController = RoomListController;
  exports.RoomsRelationTrait = RoomsRelationTrait;
  exports.ShipAspectTrait = ShipAspectTrait;
  exports.ShipEntityTrait = ShipEntityTrait;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=royal-caribbean-demo.min.js.map
